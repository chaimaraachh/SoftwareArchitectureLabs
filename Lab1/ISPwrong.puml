@startuml "Interface Segregation Principle Example"

' Definition of the Door interface with all methods
interface Door {
    + lock() : void
    + unlock() : void
    + open() : void
    + close() : void
    + timeOutCallback() : void
    + proximityCallback() : void
}

' Implementation of the Door interface by SensingDoor
class SensingDoor implements Door {
    - _locked : boolean
    - _opened : boolean
    + SensingDoor(sensor : Sensor)
    + lock() : void
    + unlock() : void
    + open() : void
    + close() : void
    + timeOutCallback() : void
    + proximityCallback() : void
}

' Implementation of the Door interface by TimedDoor
class TimedDoor implements Door {
    - static TIME_OUT : int = 100
    - _locked : boolean
    - _opened : boolean
    + TimedDoor(timer : Timer)
    + lock() : void
    + unlock() : void
    + open() : void
    + close() : void
    + timeOutCallback() : void
    + proximityCallback() : void
}

' Sensor class that registers a door and calls its proximityCallback
class Sensor {
    + register(door : Door) : void
    - isPersonClose() : boolean
}

' Timer class that registers a door and calls its timeOutCallback
class Timer {
    + register(timeOut : long, door : Door) : void
}

' Associations and dependencies
Sensor --> "1" Door : registers >
Timer --> "1" Door : registers >

SensingDoor ..> Sensor : depends on
TimedDoor ..> Timer : depends on

@enduml
